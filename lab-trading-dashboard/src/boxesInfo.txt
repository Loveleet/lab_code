case "total_trades":
    filteredData = tradeData.map((trade, index) => ({
      S_No: index + 1,
      Unique_id: trade.Unique_id,
      Pair: trade.pair,
      Investment: `$${trade.investment}`,
      Action: trade.action,
      Hedge: trade.hedge ? "✅ Yes" : "❌ No",
      Profit_Journey: trade.profit_journey ? "✅ Yes" : "❌ No",
      Buy_Qty: trade.buy_qty,
      Buy_Price: `$${trade.buy_price}`,
      Sell_Qty: trade.sell_qty,
      Sell_Price: `$${trade.sell_price}`,
      PL_After_Comm: `$${trade.pl_after_comm}`,
      Timestamp: trade.timestamp
    }));
    break;

  case "total_buy":
    filteredData = tradeData
      .filter(trade => trade.action === "BUY")
      .map((trade, index) => ({
        S_No: index + 1,
        Unique_id: trade.Unique_id,
        Pair: trade.pair,
        Investment: `$${trade.investment}`,
        Buy_Qty: trade.buy_qty,
        Buy_Price: `$${trade.buy_price}`,
        Hedge: trade.hedge ? "✅ Yes" : "❌ No",
        Profit_Journey: trade.profit_journey ? "✅ Yes" : "❌ No",
        Timestamp: trade.timestamp
      }));
    break;

  case "total_sell":
    filteredData = tradeData
      .filter(trade => trade.action === "SELL")
      .map((trade, index) => ({
        S_No: index + 1,
        Unique_id: trade.Unique_id,
        Pair: trade.pair,
        Investment: `$${trade.investment}`,
        Sell_Qty: trade.sell_qty,
        Sell_Price: `$${trade.sell_price}`,
        Hedge: trade.hedge ? "✅ Yes" : "❌ No",
        Profit_Journey: trade.profit_journey ? "✅ Yes" : "❌ No",
        Timestamp: trade.timestamp
      }));
    break;

  case "total_hedge":
    filteredData = tradeData
      .filter(trade => trade.hedge)
      .map((trade, index) => ({
        S_No: index + 1,
        Unique_id: trade.Unique_id,
        Pair: trade.pair,
        Investment: `$${trade.investment}`,
        Hedge: trade.hedge ? "✅ Yes" : "❌ No",
        Timestamp: trade.timestamp
      }));
    break;

  case "profit_journey":
    filteredData = tradeData
      .filter(trade => trade.profit_journey)
      .map((trade, index) => ({
        S_No: index + 1,
        Unique_id: trade.Unique_id,
        Pair: trade.pair,
        Investment: `$${trade.investment}`,
        Profit_Journey: trade.profit_journey ? "✅ Yes" : "❌ No",
        Timestamp: trade.timestamp
      }));
    break;

  case "active_hedges":
    filteredData = tradeData
      .filter(trade => trade.hedge_1_1_bool === 0)
      .map((trade, index) => ({
        S_No: index + 1,
        Unique_id: trade.Unique_id,
        Pair: trade.pair,
        Investment: `$${trade.investment}`,
        Hedge: "✅ Active Hedge",
        Timestamp: trade.timestamp
      }));
    break;

  case "hold_hedges":
    filteredData = tradeData
      .filter(trade => trade.hedge_1_1_bool === 1)
      .map((trade, index) => ({
        S_No: index + 1,
        Unique_id: trade.Unique_id,
        Pair: trade.pair,
        Investment: `$${trade.investment}`,
        Hedge: "✅ Hold Hedge",
        Timestamp: trade.timestamp
      }));
    break;

  case "total_investment":
    filteredData = tradeData.map((trade, index) => ({
      S_No: index + 1,
      Unique_id: trade.Unique_id,
      Pair: trade.pair,
      Investment: `$${trade.investment}`,
      Timestamp: trade.timestamp
    }));
    break;

  case "total_profit":
    filteredData = tradeData.map((trade, index) => ({
      S_No: index + 1,
      Unique_id: trade.Unique_id,
      Pair: trade.pair,
      Profit_After_Commission: `$${trade.pl_after_comm}`,
      Timestamp: trade.timestamp
    }));
    break;

  case "investment_available":
    return (
      <div className="mt-6 p-6 bg-white shadow-md rounded-lg max-w-full">
        <h2 className="text-xl font-bold">Investment Available</h2>
        <table className="w-full border-collapse">
          <thead className="bg-gray-200 sticky top-0 z-10 shadow-md">
            <tr>
              <th className="px-4 py-2 text-left border">Total Investment</th>
              <th className="px-4 py-2 text-left border">Investment Available</th>
            </tr>
          </thead>
          <tbody>
            <tr className="border-b">
              <td className="px-4 py-2 border">${tradeData.reduce((sum, trade) => sum + trade.investment, 0).toFixed(2)}</td>
              <td className="px-4 py-2 border">${(50000 - tradeData.reduce((sum, trade) => sum + trade.investment, 0)).toFixed(2)}</td>
            </tr>
          </tbody>
        </table>
      </div>
    );

  case "total_errors":
    filteredData = logData.map((log, index) => ({
      S_No: index + 1,
      Trade_ID: log.trade_id,
      Status: log.status,
      Error: log.error,
      Noticed: log.Noticed ? "✅ Yes" : "❌ No",
      Auto_Resolved: log.auto_resolved ? "✅ Yes" : "❌ No",
      Timestamp: log.timestamp
    }));
    break;

  case "active_errors":
    filteredData = logData
      .filter(log => !log.Noticed)
      .map((log, index) => ({
        S_No: index + 1,
        Trade_ID: log.trade_id,
        Status: log.status,
        Error: log.error,
        Noticed: "❌ No",
        Auto_Resolved: log.auto_resolved ? "✅ Yes" : "❌ No",
        Timestamp: log.timestamp
      }));
    break;
    case "not_auto_resolved_errors":
filteredData = logData
  .filter(log => !log.auto_resolved) // ✅ Filter logs where auto_resolved is false
  .map((log, index) => ({
    S_No: index + 1,
    Trade_ID: log.trade_id,
    Status: log.status,
    Error: log.error,
    Noticed: log.Noticed ? "✅ Yes" : "❌ No",
    Auto_Resolved: "❌ No", // ✅ Explicitly show it as ❌ No
    Timestamp: log.timestamp
  }));
break;
case "todays_count":
const today = new Date().toISOString().split("T")[0]; // ✅ Get today's date in YYYY-MM-DD format
filteredData = tradeData
  .filter(trade => trade.date === today) // ✅ Match trades executed today
  .map((trade, index) => ({
    S_No: index + 1,
    Unique_ID: trade.Unique_id,
    Pair: trade.pair,
    Investment: `$${trade.investment}`,
    Action: trade.action,
    Buy_Price: trade.buy_price ? `$${trade.buy_price}` : "-",
    Sell_Price: trade.sell_price ? `$${trade.sell_price}` : "-",
    Hedge: trade.hedge ? "✅ Yes" : "❌ No",
    Profit_Journey: trade.profit_journey ? "✅ Yes" : "❌ No",
    Timestamp: trade.timestamp
  }));
break;
case "yesterdays_count":
const yesterday = new Date();
yesterday.setDate(yesterday.getDate() - 1); // ✅ Get yesterday's date
const yesterdayDate = yesterday.toISOString().split("T")[0]; // ✅ Format YYYY-MM-DD

filteredData = tradeData
  .filter(trade => trade.date === yesterdayDate) // ✅ Match trades executed yesterday
  .map((trade, index) => ({
    S_No: index + 1,
    Unique_ID: trade.Unique_id,
    Pair: trade.pair,
    Investment: `$${trade.investment}`,
    Action: trade.action,
    Buy_Price: trade.buy_price ? `$${trade.buy_price}` : "-",
    Sell_Price: trade.sell_price ? `$${trade.sell_price}` : "-",
    Hedge: trade.hedge ? "✅ Yes" : "❌ No",
    Profit_Journey: trade.profit_journey ? "✅ Yes" : "❌ No",
    Timestamp: trade.timestamp
  }));
break;
case "total_clients":
filteredData = clientData.map((client, index) => ({
  S_No: index + 1,
  Client_ID: client.Client_id,
  Investment_Allowed: `$${client.Investment_allowed.toFixed(2)}`,
  Active: client.Active ? "✅ Yes" : "❌ No", // ✅ Show Yes/No for Active status
  Last_Trade: client.last_trade || "N/A", // ✅ Add last trade info if available
  Joined_Date: client.joined_date || "N/A" // ✅ Add join date if available
}));
break;